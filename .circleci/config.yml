# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#

version: 2.1
orbs:
  sonarcloud: sonarsource/sonarcloud@1.0.2
  slack: circleci/slack@3.4.2
executors:
  ci:
    docker:
      - image: circleci/php:7.4-node-browsers
jobs:
  tag-and-release:
    executor: ci
    environment:
      GITHUB_OWNER: csu-booking-platform
      GITHUB_REPO: application
    steps:
      - attach_workspace:
            at: .
      - add_ssh_keys:
          fingerprints:
            - "59:17:eb:0c:20:36:e3:54:b2:54:84:68:b1:79:b4:ab"
      - checkout
      - run:
          name: Get next version
          command: |
            curl -L https://github.com/idc101/git-mkver/releases/download/v1.1.1/git-mkver-linux-amd64-1.1.1.tar.gz | tar xvz
            sudo mv git-mkver /usr/local/bin
            git mkver next -t
            if [ $(git tag -l "$(git mkver next -t)") ]; then
              circleci-agent step halt
            else
              echo "export TAG=$(git mkver next -t)" >> $BASH_ENV
            fi
      # Insert commands to build & publish app & assets
      - run:
          name: Create Release
          command: |
            wget https://github.com/github-release/github-release/releases/download/v0.8.1/linux-amd64-github-release.bz2
            bzip2 -d linux-amd64-github-release.bz2
            chmod +x linux-amd64-github-release
            mv linux-amd64-github-release ghr
            git mkver tag
            git push --tags
            ./ghr release \
              --tag $TAG \
              --security-token $GITHUB_TOKEN \
              --user $GITHUB_OWNER \
              --repo $GITHUB_REPO

      - slack/status:
          fail_only: true

  build:
    executor: ci

    steps:
      - checkout

      - run:
          name: "Prepare Environment"
          command: |
            sudo apt update
            sudo docker-php-ext-install zip
      - run:
          name: "Create Environment file"
          command: |
            mv .env.ci .env
      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: "Install Backend Dependencies"
          command: composer install -n --prefer-dist

      - run:
          name: "Install Frontend Dependencies"
          command: npm ci

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      - run:
          name: "Build Frontend Assets"
          command: npm run prod

      - run:
          name: "Generate App key"
          command: php artisan key:generate

      - run:
          name: "Run Tests"
          command: php artisan test && npm run test-ci

      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports
      - store_artifacts:
          path: storage/logs/laravel.log

      - sonarcloud/scan

      - persist_to_workspace:
          root: .
          paths:
            - .

      - slack/status:
          fail_only: true

workflows:
  build:
    jobs:
      - build
      - tag-and-release:
          requires:
            - build
          filters:  # using regex filters requires the entire branch to match
            branches:
              only:  # only branches matching the below regex filters will run
                - main
